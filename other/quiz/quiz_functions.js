const { Canvas, Image } = require('canvas');
const mergeImages = require('merge-images');
const {
  error,
  pokemonList,
  randomFromArray,
} = require('../../helpers.js');
const BSOD = '';

const basePokemonIDs = [...new Set(pokemonList.map(p => Math.floor(p.id)))];

const getRandomPokemon = () => {
  const baseID = randomFromArray(basePokemonIDs);
  return randomFromArray(pokemonList.filter(p => Math.floor(p.id) == baseID));
};

const getWhosThatPokemonImage = (pokemon) => new Promise((resolve) => {
  mergeImages([
    // Base image
    './assets/images/backdrop/whos_that_pokemon.png',
    { // pokemon image
      src: `./assets/images/pokemon/${pokemon.id}.png`,
      left: 12,
      top: 0,
      custom: (ctx, image) => {
        ctx.fillStyle = '#222';//GameConstants.TypeColor[pokemon.type[0]];
        ctx.fillRect(0, 0, image.width || image.img.width, image.height || image.img.height);
        ctx.globalCompositeOperation = 'destination-in';
      },
    },
  ], {
    Canvas,
    Image,
  }).then(b64 => resolve(b64.split(';base64,').pop()))
    .catch((e) => {
      error('Image not created for pokemon shadow:', pokemon, e);
      resolve(BSOD);
    });
});

const getWhosThatPokemonFinalImage = (pokemon, shiny) => new Promise((resolve) => {
  mergeImages([
    // Base image
    './assets/images/backdrop/whos_that_pokemon.png',
    { // pokemon image
      src: `./assets/images/${shiny ? 'shiny' : ''}pokemon/${pokemon.id}.png`,
      left: 12,
      top: 0,
    },
  ], {
    Canvas,
    Image,
  }).then(b64 => resolve(b64.split(';base64,').pop()))
    .catch((e) => {
      error(`Image not created for ${shiny ? 'shiny' : 'non shiny'} pokemon:`, pokemon, e);
      resolve(BSOD);
    });
});

module.exports = {
  getRandomPokemon,
  getWhosThatPokemonImage,
  getWhosThatPokemonFinalImage,
};
